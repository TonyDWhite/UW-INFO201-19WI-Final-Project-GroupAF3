race_data <- read.csv("data/combined_state_incidence_and_race_2017.csv",stringsAsFactors = FALSE)
#View(race_data)
my_server <- function(input, output){
output$race_plot <- renderPlot(
ggplot(data = race_data) +
geom_point(mapping = aes(x = total_gun_incidence, y = White, color = total_gun_incidence))
)
}
runApp()
shinyApp(ui = my_ui, server = my_server)
#Final Project ui file
library("shiny")
library("ggplot2")
library("dplyr")
#source("access_race_df.R")
my_ui <- fluidPage(
# Application title
titlePanel(strong("Gun Violence in the United States")),
# Sidebar Layout with radio button input to specify set of countries for the table tab and plots tab and a select input to specify column of measurement.
sidebarLayout(
sidebarPanel(
selectInput(inputId = "race", label = "Race", choices = c("White", "Black", "Hispanic", "Asian", selected = "White"))
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Table", textOutput("my_text"),tableOutput("my_table")),
tabPanel("Plot", plotOutput("my_plot"))
)
)
)
)
#Final Project my_server file
library("shiny")
library("ggplot2")
library("dplyr")
source("my_ui_aaron.R")
race_data <- read.csv("data/combined_state_incidence_and_race_2017.csv",stringsAsFactors = FALSE)
#View(race_data)
my_server <- function(input, output){
output$my_plot <- renderPlot(
ggplot(data = race_data) +
geom_point(mapping = aes(x = total_gun_incidence, y = White, color = total_gun_incidence))
)
}
runApp()
#a8 ui file
library("shiny")
library("ggplot2")
library("dplyr")
source("assignment.R")
#install.packages("png")
#library("png")
x_range <- range(combined$forest_area_of_the_country)
select_values <- colnames(combined[3:7])
my_ui <- fluidPage(
# App title ----
titlePanel("Forestation Data in the year of 2016"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select the random distribution type ----
selectInput(inputId = "feature", label = "Forestation's Relation to",
choices = select_values, selected = "GDP"),
# br() element to introduce extra vertical spacing ----
br(),
# Input: Slider for the number of observations to generate ----
sliderInput("n",
"Area of Forestation range:",
min = x_range[1],
max = x_range[2],
value = x_range)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Tabset w/ plot, summary, and table ----
tabsetPanel(type = "tabs",
tabPanel("Table", textOutput("my_text"),tableOutput("my_table")),
tabPanel("Race", plotOutput("race_plot"))
)
)
)
)
#Final Project my_server file
library("shiny")
library("ggplot2")
library("dplyr")
source("my_ui_aaron.R")
race_data <- read.csv("data/combined_state_incidence_and_race_2017.csv",stringsAsFactors = FALSE)
#View(race_data)
my_server <- function(input, output){
output$my_plot <- renderPlot(
ggplot(data = race_data) +
geom_point(mapping = aes(x = total_gun_incidence, y = White, color = total_gun_incidence))
)
}
runApp()
#Final Project my_server file
library("shiny")
library("ggplot2")
library("dplyr")
source("my_ui_aaron.R")
race_data <- read.csv("data/combined_state_incidence_and_race_2017.csv",stringsAsFactors = FALSE)
#View(race_data)
my_server <- function(input, output){
output$race_plot <- renderPlot(
ggplot(data = race_data) +
geom_point(mapping = aes(x = total_gun_incidence, y = White, color = total_gun_incidence))
)
}
runApp()
#Final Project my_server file
library("shiny")
library("ggplot2")
library("dplyr")
source("my_ui_aaron.R")
race_data <- read.csv("data/combined_state_incidence_and_race_2017.csv",stringsAsFactors = FALSE)
#View(race_data)
my_server <- function(input, output){
output$race_plot <- renderPlot(
ggplot(data = race_data) +
geom_point(mapping = aes_string(x = "total_gun_incidence", y = input$race, color = total_gun_incidence))
)
}
runApp()
#Final Project my_server file
library("shiny")
library("ggplot2")
library("dplyr")
source("my_ui_aaron.R")
race_data <- read.csv("data/combined_state_incidence_and_race_2017.csv",stringsAsFactors = FALSE)
#View(race_data)
my_server <- function(input, output){
output$race_plot <- renderPlot(
ggplot(data = race_data) +
geom_point(mapping = aes_string(x = "total_gun_incidence", y = input$race, color = "total_gun_incidence"))
)
}
runApp()
runApp()
#Final Project my_server file
library("shiny")
library("ggplot2")
library("dplyr")
source("my_ui_aaron.R")
race_data <- read.csv("data/combined_state_incidence_and_race_2017.csv",stringsAsFactors = FALSE)
#View(race_data)
my_server <- function(input, output){
output$race_plot <- reactive(
output$race_plot <- renderPlot(
ggplot(data = race_data) +
geom_point(mapping = aes_string(x = "total_gun_incidence", y = input$race, color = "total_gun_incidence"))
)
)
}
runApp()
#Final Project ui file
library("shiny")
library("ggplot2")
library("dplyr")
#source("access_race_df.R")
my_ui <- fluidPage(
# Application title
titlePanel(strong("Gun Violence in the United States")),
# Sidebar Layout with radio button input to specify set of countries for the table tab and plots tab and a select input to specify column of measurement.
sidebarLayout(
sidebarPanel(
selectInput(inputId = "race", label = "Race", choices = c("White", "Black", "Hispanic", "Asian", selected = "Asian"))
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Table", textOutput("my_text"),tableOutput("my_table")),
tabPanel("Race", plotOutput("race_plot"))
)
)
)
)
#Final Project my_server file
library("shiny")
library("ggplot2")
library("dplyr")
source("my_ui_aaron.R")
race_data <- read.csv("data/combined_state_incidence_and_race_2017.csv",stringsAsFactors = FALSE)
#View(race_data)
my_server <- function(input, output){
output$race_plot <- reactive(
output$race_plot <- renderPlot(
ggplot(data = race_data) +
geom_point(mapping = aes_string(x = "total_gun_incidence", y = input$race, color = "total_gun_incidence"))
)
)
}
runApp()
#Final Project ui file
library("shiny")
library("ggplot2")
library("dplyr")
#source("access_race_df.R")
my_ui <- fluidPage(
# Application title
titlePanel(strong("Gun Violence in the United States")),
# Sidebar Layout with radio button input to specify set of countries for the table tab and plots tab and a select input to specify column of measurement.
sidebarLayout(
sidebarPanel(
selectInput(inputId = "race", label = "Race", choices = c("White", "Black", "Hispanic", "Asian", selected = "White"))
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Table", textOutput("my_text"),tableOutput("my_table")),
tabPanel("Race", plotOutput("race_plot"))
)
)
)
)
runApp()
#Final Project ui file
library("shiny")
library("ggplot2")
library("dplyr")
#source("access_race_df.R")
my_ui <- fluidPage(
# Application title
titlePanel(strong("Gun Violence in the United States")),
# Sidebar Layout with radio button input to specify set of countries for the table tab and plots tab and a select input to specify column of measurement.
sidebarLayout(
sidebarPanel(
selectInput(inputId = "race", label = "Race", choices = c("White", "Black", "Hispanic", "Asian", selected = "Asian"))
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Table", textOutput("my_text"),tableOutput("my_table")),
tabPanel("Race", plotOutput("race_plot"))
)
)
)
)
runApp()
#Final Project ui file
library("shiny")
library("ggplot2")
library("dplyr")
#source("access_race_df.R")
my_ui <- fluidPage(
# Application title
titlePanel(strong("Gun Violence in the United States")),
# Sidebar Layout with radio button input to specify set of countries for the table tab and plots tab and a select input to specify column of measurement.
sidebarLayout(
sidebarPanel(
selectInput(inputId = "race", label = "Race", choices = c("White", "Black", "Hispanic", "Asian", selected = "Asian"))
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Table", textOutput("my_text"),tableOutput("my_table")),
tabPanel("Race", checkboxInput(inputId = "has_trendline", label = "Trendline", value = TRUE),plotOutput("race_plot"))
)
)
)
)
runApp()
#Final Project my_server file
library("shiny")
library("ggplot2")
library("dplyr")
source("my_ui_aaron.R")
race_data <- read.csv("data/combined_state_incidence_and_race_2017.csv",stringsAsFactors = FALSE)
#View(race_data)
my_server <- function(input, output){
output$race_plot <- reactive(
output$race_plot <- renderPlot(
ggplot(data = race_data) +
geom_point(mapping = aes_string(x = "total_gun_incidence", y = input$race, color = "total_gun_incidence")
)
)
)
}
#Final Project my_server file
library("shiny")
library("ggplot2")
library("dplyr")
source("my_ui_aaron.R")
race_data <- read.csv("data/combined_state_incidence_and_race_2017.csv",stringsAsFactors = FALSE)
#View(race_data)
my_server <- function(input, output){
output$race_plot <- reactive(
output$race_plot <- renderPlot(
ggplot(data = race_data) +
geom_point(mapping = aes_string(x = "total_gun_incidence", y = input$race, color = "total_gun_incidence")
)
)
)
if(input$race_trendline){
output$race_plot <- reactive(
output$race_plot <- renderPlot(
ggplot(data = race_data) +
geom_point(mapping = aes_string(x = "total_gun_incidence", y = input$race, color = "total_gun_incidence")
)
)
)
}
}
geom_smooth(mapping = aes_string(x = "total_gun_incidence", y = input$racea)
}
)
#Final Project my_server file
library("shiny")
library("ggplot2")
library("dplyr")
source("my_ui_aaron.R")
race_data <- read.csv("data/combined_state_incidence_and_race_2017.csv",stringsAsFactors = FALSE)
#View(race_data)
my_server <- function(input, output){
output$race_plot <- reactive(
output$race_plot <- renderPlot(
ggplot(data = race_data) +
geom_point(mapping = aes_string(x = "total_gun_incidence", y = input$race, color = "total_gun_incidence"),
if(input$race_trendline){
geom_smooth(mapping = aes_string(x = "total_gun_incidence", y = input$race)
}
)
)
)
}
#Final Project ui file
library("shiny")
library("ggplot2")
library("dplyr")
#source("access_race_df.R")
my_ui <- fluidPage(
# Application title
titlePanel(strong("Gun Violence in the United States")),
# Sidebar Layout with radio button input to specify set of countries for the table tab and plots tab and a select input to specify column of measurement.
sidebarLayout(
sidebarPanel(
selectInput(inputId = "race", label = "Race", choices = c("White", "Black", "Hispanic", "Asian", selected = "Asian"))
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Table", textOutput("my_text"),tableOutput("my_table")),
tabPanel("Race", titlePanel(em("Race in each state and its relationship with Gun Related Crime")),
plotOutput("race_plot"),textOutput("race_text"))
)
)
)
)
#Final Project my_server file
library("shiny")
library("ggplot2")
library("dplyr")
source("my_ui_aaron.R")
race_data <- read.csv("data/combined_state_incidence_and_race_2017.csv",stringsAsFactors = FALSE)
#View(race_data)
my_server <- function(input, output){
output$race_plot <- reactive(
output$race_plot <- renderPlot(
ggplot(data = race_data) +
geom_point(mapping = aes_string(x = "total_gun_incidence", y = input$race, color = "total_gun_incidence")
),
output$race_text <- renderText(
p("wow gay")
)
)
)
}
runApp()
#Final Project my_server file
library("shiny")
library("ggplot2")
library("dplyr")
source("my_ui_aaron.R")
race_data <- read.csv("data/combined_state_incidence_and_race_2017.csv",stringsAsFactors = FALSE)
#View(race_data)
my_server <- function(input, output){
output$race_plot <- reactive(
output$race_plot <- renderPlot(
ggplot(data = race_data) +
geom_point(mapping = aes_string(x = "total_gun_incidence", y = input$race, color = "total_gun_incidence")
),
output$race_text <- renderText(
p <- "wow gay"
)
)
)
}
runApp()
runApp()
#Final Project my_server file
library("shiny")
library("ggplot2")
library("dplyr")
source("my_ui_aaron.R")
race_data <- read.csv("data/combined_state_incidence_and_race_2017.csv",stringsAsFactors = FALSE)
#View(race_data)
my_server <- function(input, output){
output$race_plot <- reactive(
output$race_plot <- renderPlot(
ggplot(data = race_data) +
geom_point(mapping = aes_string(x = "total_gun_incidence", y = input$race, color = "total_gun_incidence")
)
)
)
}
runApp()
#Final Project my_server file
library("shiny")
library("ggplot2")
library("dplyr")
source("my_ui_aaron.R")
race_data <- read.csv("data/combined_state_incidence_and_race_2017.csv",stringsAsFactors = FALSE)
#View(race_data)
my_server <- function(input, output){
output$race_plot <- reactive(
output$race_plot <- renderPlot(
ggplot(data = race_data) +
geom_point(mapping = aes_string(x = "total_gun_incidence", y = input$race, color = "total_gun_incidence")
)
)
)
output$race_text <- renderText(
"wow gay"
)
}
runApp()
#Final Project my_server file
library("shiny")
library("ggplot2")
library("dplyr")
source("my_ui_aaron.R")
race_data <- read.csv("data/combined_state_incidence_and_race_2017.csv",stringsAsFactors = FALSE)
#View(race_data)
my_server <- function(input, output){
output$race_plot <- reactive(
output$race_plot <- renderPlot(
ggplot(data = race_data) +
geom_point(mapping = aes_string(x = "total_gun_incidence", y = input$race, color = "total_gun_incidence")
)
)
)
output$race_text <- renderText(
p("This graph shows the correlation between race and gun related crime in each state.")
)
}
runApp()
library("dplyr")
runApp()
#Final Project my_server file
library("shiny")
library("ggplot2")
library("dplyr")
source("my_ui_aaron.R")
race_data <- read.csv("data/combined_state_incidence_and_race_2017.csv",stringsAsFactors = FALSE)
#View(race_data)
my_server <- function(input, output){
output$race_plot <- reactive(
output$race_plot <- renderPlot(
ggplot(data = race_data) +
geom_point(mapping = aes_string(x = "total_gun_incidence", y = input$race, color = "total_gun_incidence")
)
)
)
output$race_text <- renderText(
p <- p("This graph shows the correlation between race and gun related crime in each state.")
)
}
runApp()
#Final Project my_server file
library("shiny")
library("ggplot2")
library("dplyr")
source("my_ui_aaron.R")
race_data <- read.csv("data/combined_state_incidence_and_race_2017.csv",stringsAsFactors = FALSE)
#View(race_data)
my_server <- function(input, output){
output$race_plot <- reactive(
output$race_plot <- renderPlot(
ggplot(data = race_data) +
geom_point(mapping = aes_string(x = "total_gun_incidence", y = input$race, color = "total_gun_incidence")
)
)
)
output$race_text <- renderText(
p <- "This graph shows the correlation between race and gun related crime in each state."
)
}
runApp()
shiny::runApp()
#Final Project my_server file
library("shiny")
library("ggplot2")
library("dplyr")
source("my_ui_aaron.R")
race_data <- read.csv("data/combined_state_incidence_and_race_2017.csv",stringsAsFactors = FALSE)
#View(race_data)
my_server <- function(input, output){
output$race_plot <- reactive(
output$race_plot <- renderPlot(
ggplot(data = race_data) +
geom_point(mapping = aes_string(x = "total_gun_incidence", y = input$race, color = "total_gun_incidence")
)
)
)
output$race_text1 <- renderText(
p <- "This graph shows the correlation between race and gun related crime in each state. Race appears to be a relatively small factor in the gun crime rate. "
)
output$race_text2 <- renderText(
p2 <- "When looking at the Gun Crime data, there are a lot more explicit and implicit factors that we fail to consider outside of race. For instance, states like Illinois and Florida have staggering large amount of gun crime in the nation. And only analyzing the race data does not help to reach a clear, concise conclusion. We need to take in consideration of the local community, government funding, police enforcement, and many other issues happening within particular communities with high gun crime numbers to fully understand the problem.  "
)
output$race_text3 <- renderText(
p <- "The ultimate reason that we chose to look at race and its relationship with gun crime is to clarify that race does not play a significant role, if at all, in this urgent issue. We do not intend to make any connections. Furthermore, it is important to realize that correlation does not imply causation and we should carefully screen and think about the data being presented to us.
"
)
}
runApp()
