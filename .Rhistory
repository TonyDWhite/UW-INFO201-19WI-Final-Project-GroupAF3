print("Hello World")
2+0+1
print("Hello World")
print("YO")
2+0+1
print("Hello World")
print("YO")
print("4 score and 7 years ago")
my_var <- 201
print(my_var)
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Findlay, OH"
# Assign your name to the variable `my_name`
my_name <- "Thomas"
# Assign your height (in inches) to a variable `my_height`
my_height <- "69 in."
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 100
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- 100
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- FALSE
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 10
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1
install.packages("stringr")
library("stringr")
word(lyric_e, 2, 4)
install.packages("dplyr")
library("dplyr", lib.loc="~/R/win-library/3.5")
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_mpg <- vehicles_two_wheel[vehicles_two_wheel$hwy == min(vehicles_two_wheel$hwy), ]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_two_wheel <- vehicles[vehicles$drive == "2-Wheel Drive" & vehicles$hwy > 20 , ]
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_two_wheel <- vehicles[vehicles$drive == "2-Wheel Drive" & vehicles$hwy > 20 , ]
vehicles_two_wheel
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_mpg <- vehicles_two_wheel[vehicles_two_wheel$hwy == min(vehicles_two_wheel$hwy), ]
worst_mpg$id
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_efficient <- function(year_choice, make_choice) {
car_year_make <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice , ]
car_year_make[car_year_make$hwy == max(car_year_make$hwy) , "model"]
}
# What was the most efficient Honda model of 1995?
most_efficient(1995, "Honda")
api_key <- "374df116e723d5d9f711845dec376b15"
# Load results from the analysis
library(knitr)
source("analysis.R")
kable(small_2017_gun_incidence)
# Load results from the analysis
library(knitr)
source("analysis.R")
race_data_2017_kable <- kable(race_data_2017)
race_data_2017_kable
small_2017_gun_frame <- kable(small_2017_gun_incidence)
small_2017_gun_frame <- kable(small_2017_gun_incidence)
small_2017_gun_frame_kable
library(shiny)
library(shiny)
install.packages("geojsonio")
library(geojsonio)
#View(lat_long_data)
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
library(maps)
#install.packages("ggmap")
library(ggmap)
library(ggplot2)
library(tidyr)
united_states <- map_data("state")
View(united_states)
gun_incidents <- read.csv("data/state_total_incidence_2017.csv", stringsAsFactors = FALSE)
setwd("~/Info Final Project/UW-INFO201-19WI-Final-Project-GroupAF3")
gun_incidents <- read.csv("data/state_total_incidence_2017.csv", stringsAsFactors = FALSE)
View(gun_incidents)
colnames(gun_incidents)[2] <- "region"
View(gun_incidents)
View(united_states)
gun_incidents$region <- tolower(gun_incidents$region)
View(gun_incidents)
map_data <- join(united_states, gun_incidents, by = "region")
map_data <- full_join(united_states, gun_incidents, by = "region")
library(tidyr)
map_data <- full_join(united_states, gun_incidents, by = "region")
library(maps)
#install.packages("ggmap")
library(ggmap)
library(ggplot2)
library(dplyr)
map_data <- full_join(united_states, gun_incidents, by = "region")
View(map_data)
united_states_final <- select(map_data, -X)
View(united_states_final)
